<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	creationComplete="onCreationComplete()" > 
	
	<mate:Listener type="{StoppedViewingWebcamEvent.STOPPED_VIEWING_WEBCAM}" method="onViewVideoCloseEvent"/>
	<mate:Listener type="{UsersRollEvent.USER_ROLL_OVER}" method="onRollOver" />
	<mate:Listener type="{UsersRollEvent.USER_ROLL_OUT}" method="onRollOut" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.FlexEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.Role;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.events.StoppedViewingWebcamEvent;
			import org.bigbluebutton.main.model.users.Conference;
			import org.bigbluebutton.main.model.users.events.KickUserEvent;
			import org.bigbluebutton.main.model.users.events.LowerHandEvent;
			import org.bigbluebutton.modules.users.events.UsersRollEvent;
			import org.bigbluebutton.core.events.VoiceConfEvent;
			import org.bigbluebutton.modules.users.events.ViewCameraEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable]
			private var images:Images = new Images();
   			
			private var moderator:Boolean = false;
			[Bindable]
			private var rolledOver:Boolean = false;
			
			private var muteRolled:Boolean = false;
			
			private function onCreationComplete():void{
				muteBtn.enabled = kickUserBtn.enabled = moderator = UserManager.getInstance().getConference().amIModerator();
				if (moderator) {
					BindingUtils.bindProperty(muteBtn, "visible", voiceJoinedInd, "visible");
					muteBtn.includeInLayout = true;
				} else {
					BindingUtils.bindProperty(muteImg, "visible", voiceJoinedInd, "visible");
					muteImg.includeInLayout = true;
				}
				
				this.addEventListener(FlexEvent.DATA_CHANGE, dataChangeHandler);
				
				BindingUtils.bindSetter(updateMuteBtn, muteInd, "visible");
			}
			
			private function dataChangeHandler(e:Event):void {
				//rest rolledOver when the data changes because onRollOut wont be called if the row moves
				rolledOver = false;
			}
			
			private function onRollOver(e:UsersRollEvent):void{
				if (moderator && (e.userID == data.userID && !data.me && !data.phoneUser)) {
					rolledOver = true;
				}
			}
			
			private function onRollOut(e:UsersRollEvent):void{
				if (moderator && (e.userID == data.userID && !data.me)) {
					rolledOver = false;
				}
			}
			
			private function viewCamera():void {
   				webcamBtn.enabled = false;
				dispatchEvent(new ViewCameraEvent(data.userID, data.streamName, data.name));
   			}
   			
   			private function onViewVideoCloseEvent(event:StoppedViewingWebcamEvent):void {
   				if (data.userID == event.webcamUserID) {
   					webcamBtn.enabled = true;
   				}
   			}		
			
			private function kickUser():void{
				dispatchEvent(new KickUserEvent(data.userID));
			}
			
			private function toggleMuteState():void {
				var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);
				e.userid = data.voiceUserid;
				e.mute = !data.voiceMuted;
				dispatchEvent(e);
			}
			
			private function updateMuteBtn(voiceMuted:Boolean = false):void {
				if (data != null) {
					if (moderator) {
						if (data.voiceMuted == muteRolled)
							muteBtn.setStyle("icon", images.audio);
						else
							muteBtn.setStyle("icon", images.audio_muted);
					} else {
						if (data.voiceMuted == muteRolled)
							muteImg.source = images.audio;
						else
							muteImg.source = images.audio_muted;
					}
				}
			}
			
			private function mouseOverHandler():void {
				muteRolled = true;
				updateMuteBtn();
			}
			
			private function mouseOutHandler():void {
				muteRolled = false;
				updateMuteBtn();
			}
			
		]]>
	</mx:Script>
	<mx:Image id="talkingIcon" visible="{data.talking}" source="{images.sound_new}" width="20" height="20" 
				toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.talking')}" />
	<mx:Button id="webcamBtn" visible="{data.hasStream}" click="viewCamera()" icon="{images.webcam_new}"
				width="20" height="20" enabled="false"
				toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.webcam')}" />
	<mx:Image id="muteImg" visible="false" includeInLayout="false" width="16" height="16" />
	<mx:Button id="muteBtn" visible="false" includeInLayout="false" enabled="false" icon="{images.audio}"
				width="20" height="20" click="toggleMuteState()"
				mouseOver="mouseOverHandler()"
				mouseOut="mouseOutHandler()"
				toolTip="{data.voiceMuted ? ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToTalk') : ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.pushToMute')}" />
	<mx:Button id="kickUserBtn" icon="{images.eject_user_new}" 
				width="20" height="20" visible="{rolledOver}"
				toolTip="{ResourceUtil.getInstance().getString('bbb.users.usersGrid.mediaItemRenderer.kickUser')}"
				click="kickUser()"/>
	<mx:Image id="showLock" visible="{data.voiceLocked}" source="{images.lock_close}" width="20" height="20" />
				
	<!-- Helper objects because direct bindings to data break when the itemRenderer is recycled -->
	<mx:Image id="muteInd" includeInLayout="false" visible="{data.voiceMuted}" />
	<mx:Image id="voiceJoinedInd" includeInLayout="false" visible="{data.voiceJoined}" />
</mx:HBox>
